use avian3d::prelude::{AngularVelocity, Collider, PhysicsSet, RigidBody};
use avian3d::PhysicsPlugins;
// use avian3d::prelude::*;
use bevy::pbr::wireframe::WireframePlugin;
use bevy::{diagnostic::DiagnosticsStore, prelude::*};
use bevy_diagnostic::{
    Diagnostic, DiagnosticPath, FrameTimeDiagnosticsPlugin, SystemInformationDiagnosticsPlugin,
};

#[derive(Component, Debug, PartialEq, Eq)]
struct MyCamera;

#[derive(Component, Debug, PartialEq, Eq)]
struct MyStaticBase;

#[derive(Component, Debug, PartialEq, Eq)]
struct MyDynamicObject;

#[derive(Component, Debug, PartialEq, Eq)]
struct MyPointLight;

use avian3d::prelude::*;
use bevy::prelude::*;

fn main() {
    App::new()
        // Enable physics
        .add_plugins((DefaultPlugins, PhysicsPlugins::default()))
        .add_systems(Startup, setup)
        .run();
}

fn setup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    // Static physics object with a collision shape
    commands.spawn((
        RigidBody::Static,
        Collider::cylinder(4.0, 0.1),
        Mesh3d(meshes.add(Circle::new(5.0))),
        MeshMaterial3d(materials.add(Color::WHITE)),
        // Transform::from_xyz(0.0, -3.14, 0.0),
        MyStaticBase,
    ));

    // Dynamic physics object with a collision shape and initial angular velocity
    commands.spawn((
        RigidBody::Dynamic,
        Collider::cuboid(1.0, 1.0, 1.0),
        Mesh3d(meshes.add(Cuboid::new(1.0, 1.0, 1.0))),
        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),
        Transform::from_xyz(0.0, 5.0, 0.0),
        // AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),
        // PbrBundle {
        //     mesh: meshes.add(Cuboid::from_length(1.0)),
        //     material: materials.add(Color::srgb_u8(124, 144, 255)),
        //     transform: Transform::from_xyz(0.0, 4.0, 0.0),
        //     ..default()
        // },
        MyDynamicObject,
    ));

    // camera
    commands.spawn((
        Camera3d::default(),
        // Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::Y),
        // Transform::from_xyz(5.0, 2.0, 5.0).looking_at(Vec3::ZERO, Dir3::Y),
        // Transform::from_xyz(10.0, 4.5, 0.0).looking_at(Vec3::ZERO, Vec3::Y),
        Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::ZERO),
        MyCamera,
    ));

    // light
    commands.spawn((
        PointLight {
            shadows_enabled: true,
            ..default()
        },
        Transform::from_xyz(4.0, 8.0, 4.0),
        MyPointLight,
    ));
}
