use avian3d::prelude::{AngularVelocity, Collider, PhysicsSet, RigidBody};
use avian3d::PhysicsPlugins;
// use avian3d::prelude::*;
use bevy::pbr::wireframe::WireframePlugin;
use bevy::{diagnostic::DiagnosticsStore, prelude::*};
use bevy_diagnostic::{
    Diagnostic, DiagnosticPath, FrameTimeDiagnosticsPlugin, SystemInformationDiagnosticsPlugin,
};

#[derive(Component, Debug, PartialEq, Eq)]
struct MyCamera;

fn main() {
    App::new()
        .add_plugins((DefaultPlugins, PhysicsPlugins::default()))
        // .add_plugins((WireframePlugin,))
        // .add_plugins(FrameTimeDiagnosticsPlugin)
        // .add_plugins(SystemInformationDiagnosticsPlugin)
        .add_systems(Startup, setup)
        // .add_systems(
        //     PostUpdate,
        //     camera_follow_player
        //         .after(PhysicsSet::Sync)
        //         .before(TransformSystem::TransformPropagate),
        // )
        // .add_systems(Update, get_fps)
        // .register_diagnostic(Diagnostic::new(SYSTEM_ITERATION_COUNT).with_suffix(" iterations"))
        // .add_systems(Update, camera_movement)
        .run();
}

/// set up a simple 3D scene
fn setup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    // camera
    commands.spawn((
        Camera3d::default(),
        // Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::Y),
        Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Dir3::Y),
        MyCamera,
    ));

    // light
    commands.spawn((
        PointLight {
            shadows_enabled: true,
            ..default()
        },
        Transform::from_xyz(4.0, 8.0, 4.0),
    ));

    commands.spawn((
        RigidBody::Static,
        Collider::cylinder(4.0, 0.1),
        Mesh3d(meshes.add(Circle::new(5.0))),
        MeshMaterial3d(materials.add(Color::WHITE)),
        // Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)),
        // PbrBundle {
        //     mesh: meshes.add(Cylinder::new(4.0, 0.1)),
        //     material: materials.add(Color::WHITE),
        //     ..default()
        // },
    ));

    // commands.spawn((
    //     Mesh3d(meshes.add(Cuboid::new(1.0, 1.0, 1.0))),
    //     MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),
    //     RigidBody::Dynamic,
    //     Collider::cuboid(1.0, 1.0, 1.0),
    //     AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),
    //     Transform::from_xyz(0.0, 2.5, 0.0),
    //     // PbrBundle {
    //     //     mesh: meshes.add(Cylinder::new(4.0, 0.1)),
    //     //     material: materials.add(Color::WHITE),
    //     //     ..default()
    //     // },
    // ));

    // cube
    commands.spawn((
        RigidBody::Dynamic,
        Mesh3d(meshes.add(Cuboid::new(1.0, 1.0, 1.0))),
        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),
        Transform::from_xyz(0.0, 0.5, 0.0),
        // Player,
    ));
}
