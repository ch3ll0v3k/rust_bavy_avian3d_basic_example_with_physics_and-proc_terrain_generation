use std::{ fmt, sync::Mutex };
// use tracing::instrument;

use avian3d::prelude::{
  AngularVelocity,
  Collider,
  CollisionMargin,
  ExternalAngularImpulse,
  ExternalForce,
  ExternalImpulse,
  ExternalTorque,
  LinearVelocity,
  LockedAxes,
  Mass,
  RigidBody,
};
use bevy::{
  input::{
    common_conditions::{ input_just_pressed, input_just_released },
    keyboard::KeyboardInput,
    mouse::{ MouseButtonInput, MouseScrollUnit, MouseWheel },
    ButtonState,
  },
  math::VectorSpace,
  prelude::*,
};

use crate::{
  debug::get_defaul_physic_debug_params,
  entities::with_children::MEntityBigSphere,
  lights::{ MPointLightFromMarker, MPointLightMarker, MPointLightToMarker },
  AnyObject,
  COLLISION_MARGIN,
};

#[derive(Component, Debug, PartialEq, Eq)]
pub struct CameraMarker;

#[derive(Component, Debug, PartialEq, Eq)]
pub struct CameraParentMarker;

pub struct CameraPlugin;

// static mut IS_LEFT_DOWW: Option<bool> = Some(false);

static IS_LEFT_DOWW: Mutex<Option<bool>> = Mutex::new(Some(false));

// prettier-ignore
impl Plugin for CameraPlugin {
  fn build(&self, app: &mut App) {
    app
      .add_systems(Startup, startup)
      .add_systems(Update, update)
      .add_systems(Update, zoom_on_scroll)
      .add_systems(Update, control_cam)
      .add_systems(Update, keyboard_events)
      .add_systems(Update, handle_drag)
      .add_systems(Update, cam_track_object)
      .add_systems(Update, cam_track_object_origin)
      .add_systems(Update, handle_left_click)
      .add_systems(Update, apply_force_to_selected_object)
      .add_systems(Update, ( 
          on_q_pressed.run_if(
            input_just_pressed(KeyCode::Space)
          ),
          on_m_left_down.run_if(
            input_just_pressed(MouseButton::Left)
          ),
          on_m_left_up.run_if(
            input_just_released(MouseButton::Left)
          ),
        )
      );
  }
}
const MUL_POS: f32 = 5.0;
const POS: Vec3 = Vec3::new(-2.5 * MUL_POS, 4.5 * MUL_POS, 9.0 * MUL_POS);

fn update() {}

// impl fmt::Debug for Commands {
//   fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
//     write!(f, "Hi: {}", self.id)
//   }
// }

fn startup(
  mut commands: Commands,
  mut meshes: ResMut<Assets<Mesh>>,
  mut materials: ResMut<Assets<StandardMaterial>>
) {
  commands.spawn((
    RigidBody::Dynamic,
    // Collider::sphere(1.65),
    Collider::sphere(2.0),
    // CollisionMargin(COLLISION_MARGIN * 10.0),
    Transform::from_xyz(-20.0, 20.0, 20.0).looking_at(Vec3::ZERO, Vec3::ZERO),
    Mesh3d(meshes.add(Sphere::new(2.0))),
    MeshMaterial3d(materials.add(Color::srgb_u8(255, 40, 40))),
    // AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),
    Mass(10.0),
    get_defaul_physic_debug_params(),
    AnyObject,
  ));

  commands
    .spawn((
      RigidBody::Dynamic,
      Collider::sphere(1.0),
      CollisionMargin(COLLISION_MARGIN * 10.0),
      Transform::from_xyz(POS.x, POS.y, POS.z).looking_at(POS, Vec3::Y),
      Mesh3d(meshes.add(Sphere::new(1.65))),
      MeshMaterial3d(materials.add(Color::srgb_u8(127, 255, 0))),
      // AngularVelocity(Vec3::new(2.5, 3.5, 1.5)),
      Mass(10.0),
      CameraParentMarker,
      LockedAxes::ROTATION_LOCKED,
    ))
    .with_children(|children| {
      children.spawn((
        Camera3d::default(),
        Transform::from_xyz(0.0, 0.0, 0.0), // .looking_at(POS, Vec3::Y),
        CameraMarker,
      ));
    });
}

fn accelerate_bodies(mut query: Query<(&mut LinearVelocity, &mut AngularVelocity)>) {
  for (mut linear_velocity, mut angular_velocity) in query.iter_mut() {
    linear_velocity.x += 0.05;
    angular_velocity.z += 0.05;
  }
}

// prettier-ignore
fn cam_track_object(
  query_big_sphere: Query<&Transform, (With<MEntityBigSphere>, Without<MPointLightMarker>)>,
  mut query_point_light: Query<&mut Transform, (With<MPointLightMarker>, Without<MEntityBigSphere>)>,
  // mut query_camera: Query<&mut Transform, (With<CameraMarker>, Without<MPointLightMarker>, Without<MEntityBigSphere>)>
) {

  let trans_sphere = query_big_sphere.single();
  let mut trans_light = query_point_light.single_mut();
  // trans_light.rotate_local_y(0.01);
  
  trans_light.translation.x = trans_sphere.translation.x;
  trans_light.translation.y = trans_sphere.translation.y + 50.0;
  trans_light.translation.z = trans_sphere.translation.z;
  trans_light.look_at(trans_sphere.translation, Vec3::Z);
  // let mut trans_cam = query_camera.single_mut();
  // trans_cam.look_at(trans_sphere.translation, Vec3::Y);
  // trans_cam.translation.x = trans_sphere.translation.x + 5.0;
  // trans_cam.translation.y = trans_sphere.translation.y + 5.0;
  // trans_cam.translation.z = trans_sphere.translation.z + 5.0;
}

// prettier-ignore
fn cam_track_object_origin(
  query_big_sphere: Query<&Transform, (
    With<MEntityBigSphere>, 
    Without<MPointLightMarker>, 
    Without<MPointLightFromMarker>, 
    Without<MPointLightToMarker>
  )>,
  query_point_light: Query<&Transform, (
    With<MPointLightMarker>, 
    Without<MEntityBigSphere>,
    Without<MPointLightFromMarker>, 
    Without<MPointLightToMarker>,
  )>,
  mut from: Query<&mut Transform, (
    With<MPointLightFromMarker>, 
    Without<MEntityBigSphere>, 
    Without<MPointLightMarker>, 
    Without<MPointLightToMarker>
  )>,
  mut to: Query<&mut Transform, (
    With<MPointLightToMarker>, 
    Without<MEntityBigSphere>, 
    Without<MPointLightMarker>,
    Without<MPointLightFromMarker>, 
  )>,
) {

  let trans_sphere = query_big_sphere.single();
  let trans_light = query_point_light.single();

  // trans_light.rotate_local_y(0.01);

  let mut m_from = from.single_mut();
  m_from.translation = trans_light.translation.clone();

  let mut m_to = to.single_mut();
  m_to.translation = trans_sphere.translation.clone();

  // MPointLightFromMarker;
  // MPointLightToMarker;

  // let trans_sphere = query_big_sphere.single();
  //   let mut trans_light = query_point_light.single_mut();
  // // trans_light.rotate_local_y(0.01);
  
  // trans_light.translation.x = trans_sphere.translation.x;
  // trans_light.translation.y = trans_sphere.translation.y + 20.0;
  // trans_light.translation.z = trans_sphere.translation.z;
  // trans_light.look_at(trans_sphere.translation, Vec3::ZERO);
  // // let mut trans_cam = query_camera.single_mut();
  // // trans_cam.look_at(trans_sphere.translation, Vec3::Y);
  // // trans_cam.translation.x = trans_sphere.translation.x + 5.0;
  // // trans_cam.translation.y = trans_sphere.translation.y + 5.0;
  // // trans_cam.translation.z = trans_sphere.translation.z + 5.0;
}

// #[tracing::instrument]
fn zoom_on_scroll(
  mut mw_evt: EventReader<MouseWheel>,
  mut query_camera: Query<&mut Projection, With<CameraMarker>>
) {
  let Projection::Perspective(persp) = query_camera.single_mut().into_inner() else {
    return;
  };

  for mouse_wheel_event in mw_evt.read() {
    let (_dx, _dy) = match mouse_wheel_event.unit {
      // MouseScrollUnit::Line => (mouse_wheel_event.x, mouse_wheel_event.y),
      // MouseScrollUnit::Pixel => (mouse_wheel_event.x, mouse_wheel_event.y),
      MouseScrollUnit::Line => (mouse_wheel_event.x, mouse_wheel_event.y),
      MouseScrollUnit::Pixel => (mouse_wheel_event.x, mouse_wheel_event.y),
    };

    // println!("Mouse wheel: X: {}, Y: {}", dx, dy);

    let dy = _dy * -1.0;
    let val: f32 = persp.fov + dy / 30.0;

    // println!("FOV: {}", val);

    if val < 0.05 {
      return;
    } else if val > 2.75 {
      return;
    }

    persp.fov = val;
    return;
  }
}

fn on_q_pressed() {
  // println!("Q pressed");
}

fn set_global_state(value: bool) {
  let mut state = IS_LEFT_DOWW.lock().unwrap();
  *state = Some(value);
}

fn get_global_state() -> Option<bool> {
  let state = IS_LEFT_DOWW.lock().unwrap();
  *state
}

// prettier-ignore
fn on_m_left_down() { set_global_state(true); }
// prettier-ignore
fn on_m_left_up() { set_global_state(false); }

// fn get_camera_direction(
//     query: Query<&GlobalTransform, With<Camera>>,
// ) {
//     if let Some(camera_transform) = query.iter().next() {
//         let forward = camera_transform.forward();
//         println!("Camera forward direction: {:?}", forward);
//     }
// }

// #[tracing::instrument]
// prettier-ignore
// fn abc(
//   mut commands: Commands,
//   mut query: Single<&mut CameraParentMarker, (With<CameraParentMarker>)>,
//   mut cam_parent_2: Single<&mut CameraParentMarker, With<CameraParentMarker>>
// ) {
//   let( mut cam_parent) = query.into_inner();
//   // cam_parent
//   let p = cam_parent.into_inner();
//   // commands.entity(cam_parent)
// }

/// XXX
// prettier-ignore
fn apply_force_to_selected_object(
  mut commands: Commands,
  // query: Query<(Entity, &RigidBody, &Transform), With<CameraParentMarker>>
  query: Query<(Entity, &RigidBody), With<CameraParentMarker>>
) {

  // return;

  if let Some(is_left_m_btn_down) = get_global_state() {
    if !is_left_m_btn_down { return; }
  }

  // let a: ExternalForce;
  // let b: ExternalTorque;
  // let c: ExternalImpulse;
  // let d: ExternalAngularImpulse;

  // ExternalForce::new(Vec3::new(0.1, 0.1, 0.1)).with_persistence(false);
  // let force = Vec3::new(10.0, 0.0, 0.0); // Replace with your desired force vector

  let mut force = ExternalImpulse::default();
  force
    .apply_impulse_at_point(
      Vec3::Y * 1.0 * 10.0, 
      Vec3::X, 
      Vec3::ZERO
    )
    .with_persistence(false);

  // force
  //   .apply_impulse_at_point(
  //     Vec3::new(0.0, 50.0, 0.0),
  //     Vec3::new(0.0, 0.0, 0.0),
  //     Vec3::new(0.0, 0.0, 0.0)
  //   )
  //   .with_persistence(true);

  // let mut force = ExternalForce::default();
  // force.apply_force_at_point(
  //   Vec3::Y, 
  //   Vec3::X, 
  //   Vec3::ZERO
  // ).with_persistence(false);

  // let (entity, _rigid_body) = query.iter();
  let (entity, body) = query.single();
  commands
    .entity(entity)
    // .insert((RigidBody::Dynamic, force));
    .insert((RigidBody::Dynamic, force));
    // .insert(Force::new(force, transform.translation));

  // // for (entity, _rigid_body, transform) in query.iter() {
  // for (entity, _rigid_body) in query.iter() {
  //   println!("Entity apply_impulse_at_point: entity: {:?}, force: {:?}", entity, force);
  //   commands
  //     .entity(entity)
  //     // .insert((RigidBody::Dynamic, force));
  //     .insert((RigidBody::Dynamic, force));
  //     // .insert(Force::new(force, transform.translation));
  // }
}

fn control_cam(
  mut mw_evt: EventReader<MouseWheel>,
  keys: Res<ButtonInput<KeyCode>>,
  mut query_camera: Query<&mut Transform, (With<CameraMarker>, Without<CameraParentMarker>)>,
  mut query_camera_parent: Query<&mut Transform, (With<CameraParentMarker>, Without<CameraMarker>)>
  // mut query_camera_parent: Query<
  //   (Entity, &RigidBody, &mut Transform),
  //   (With<CameraParentMarker>, Without<CameraMarker>)
  // >
  // query: Query<(Entity, &RigidBody, &Transform), With<CameraParentMarker>>
) {
  // if let Some(is_left_m_btn_down) = get_global_state() {
  //   if !is_left_m_btn_down { return; }
  // }

  let bb = query_camera_parent.into_iter();
  // let mut transform = query_camera.single_mut();
  let mut transform = query_camera_parent.single_mut();
  // transform.translation -= Vec3::new(0.0, dy / 1.0, 0.0);

  let fw = transform.forward();
  // println!("FW: x: {}, y: {}, z: {}", fw.x, fw.y, fw.z);

  // query_camera_parent.

  let mut x = fw.x / 10.0;
  let mut y = fw.y / 10.0;
  let mut z = fw.z / 10.0;

  if keys.pressed(KeyCode::KeyW) {
    transform.translation.x += x;
    transform.translation.y += y;
    transform.translation.z += z;
  } else if keys.pressed(KeyCode::KeyS) {
    transform.translation.x -= x;
    transform.translation.y -= y;
    transform.translation.z -= z;
  }

  let right = transform.right();
  x = (x - right.x) / 20.0;
  y = (y - right.y) / 20.0;
  z = (z - right.z) / 20.0;

  if keys.pressed(KeyCode::KeyA) {
    transform.translation.x += x;
    transform.translation.y += y;
    transform.translation.z += z;
  } else if keys.pressed(KeyCode::KeyD) {
    transform.translation.x -= x;
    transform.translation.y -= y;
    transform.translation.z -= z;
  }

  // let x = keys.into_inner();
  // println!("X: {:?}", x);

  // for key in keys.get_pressed() {
  //   println!("{:?} is currently held down", key);
  // }

  // rotater around own axis
  // if keys.pressed(KeyCode::KeyA){
  //   transform.rotate_local_y(0.01);
  // }else if keys.pressed(KeyCode::KeyD) {
  //   transform.rotate_local_y(-0.01);
  // }
}

// prettier-ignore
fn handle_left_click(
  mut ev_m_motion: EventReader<bevy::input::mouse::MouseMotion>,
  mut ev_b_input: EventReader<MouseButtonInput>,
  mut query_camera: Query<&mut Transform, With<CameraMarker>>
) {
  let mut transform = query_camera.single_mut();
  for ev_b in ev_b_input.read() {
    if ev_b.button == MouseButton::Left {
      // // println!("Left mouse button pressed");
      // for ev_m in ev_m_motion.read() {
      //   // println!("Mouse drag: X: {} px, Y: {} px", ev_m.delta.x, ev_m.delta.y);
      //   transform.rotate_local_y(ev_m.delta.x / 1000.0);
      //   transform.rotate_local_x((ev_m.delta.y / 1000.0) * 1.0);
      // }
    }
  }
}

// prettier-ignore
fn handle_drag(
  mut ev_m_motion: EventReader<bevy::input::mouse::MouseMotion>,
  mut query_camera: Query<&mut Transform, (With<CameraMarker>, Without<CameraParentMarker>)>,
  mut query_camera_parent: Query<&mut Transform, (With<CameraParentMarker>, Without<CameraMarker>)>
) {
  // if let Some(is_left_m_btn_down) = get_global_state() {
  //   if !is_left_m_btn_down { return; }
  // }

  // let mut transform = query_camera.single_mut();
  let mut trans_cam_parent = query_camera_parent.single_mut();
  let mut trans_cam = query_camera.single_mut();
  for ev_m in ev_m_motion.read() {
    // println!("Mouse drag: X: {} px, Y: {} px", ev_m.delta.x, ev_m.delta.y);
    trans_cam_parent.rotate_local_y((ev_m.delta.x / 500.0) * -1.0);
    // trans_cam_parent.rotate_local_x((ev_m.delta.y / 1000.0) * 1.0);
    // trans_cam_parent.rotate_local_z((ev_m.delta.y / 1000.0) * 1.0);
    trans_cam.rotate_local_x((ev_m.delta.y / 1000.0) * -1.0);
    // trans_cam.rotate_local_z((ev_m.delta.y / 1000.0) * 1.0);
  }

}

fn keyboard_events(mut evr_kbd: EventReader<KeyboardInput>) {
  // key_code: KeyA, logical_key: Character("q")
  // key_code: KeyW, logical_key: Character("z")
  // key_code: KeyD, logical_key: Character("d")
  // key_code: KeyS, logical_key: Character("s")

  for ev in evr_kbd.read() {
    match ev.state {
      ButtonState::Pressed => {
        // println!("Key press: {:?} {:?}", ev.key_code, ev.logical_key);
      }
      ButtonState::Released => {
        // println!("Key release: {:?} {:?}", ev.key_code, ev.logical_key);
      }
    }
  }
}

// fn update_scroll_position(
//   mut mw_evt: EventReader<MouseWheel>,
//   mut query_camera: Query<&mut Transform, With<CameraMarker>>
// ) {
//   let transform = query_camera.single_mut();

//   for mouse_wheel_event in mw_evt.read() {
//     let (dx, dy) = match mouse_wheel_event.unit {
//       // MouseScrollUnit::Line => (mouse_wheel_event.x, mouse_wheel_event.y),
//       // MouseScrollUnit::Pixel => (mouse_wheel_event.x, mouse_wheel_event.y),
//       MouseScrollUnit::Line => (mouse_wheel_event.x, mouse_wheel_event.y),
//       MouseScrollUnit::Pixel => (mouse_wheel_event.x, mouse_wheel_event.y),
//     };

//     println!("Mouse wheel: X: {}, Y: {}", dx, dy);

//     // transform.translation -= Vec3::new(0.0, dy / 1.0, 0.0);

//     // if kb_evt.pressed(KeyCode::ControlLeft) || kb_evt.pressed(KeyCode::ControlRight) {
//     //     std::mem::swap(&mut dx, &mut dy);
//     // }
//   }
// }

// fn zoom_perspective(mut query_camera: Query<&mut Projection, With<CameraMarker>>) {
//   // assume perspective. do nothing if orthographic.
//   let Projection::Perspective(persp) = query_camera.single_mut().into_inner() else {
//     return;
//   };
//   persp.fov /= 1.25; // zoom in
//   persp.fov *= 1.25; // zoom out
// }

// fn debug_cam_position(mut query_camera: Query<&mut Transform, With<CameraMarker>>) {
//   let mut transform = query_camera.single_mut();

//   transform.rotate_local_y(0.01);

//   match transform {
//     Transform::Perspective(persp) => {
//       // we have a perspective projection
//     }
//     Transform::Orthographic(ortho) => {
//       // we have an orthographic projection
//     }
//   }
// }

// static mut X: i32 = 0;
// fn debug_transform(query_camera: Query<&Transform, With<CameraMarker>>) {
//   unsafe {
//     X += 1;
//     if X % 100 == 0 {
//       let transform = query_camera.single();
//       println!(
//         "cam: (:x, :y, :z) = ({}, {}, {})",
//         transform.translation.x,
//         transform.translation.y,
//         transform.translation.z
//       );
//     }
//   }
// }

// prettier-ignore
fn test_cam_update(
  mut query_camera: Query<&mut Transform, (With<CameraMarker>)>
) {

  // let mut trans_cam = query_camera.single_mut();
  // trans_cam.look_at(trans_sphere.translation, Vec3::Y);
  // trans_cam.translation.x = trans_sphere.translation.x + 5.0;
  // trans_cam.translation.y = trans_sphere.translation.y + 5.0;
  // trans_cam.translation.z = trans_sphere.translation.z + 5.0;


}
